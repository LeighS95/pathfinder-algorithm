{"version":3,"sources":["Pathfinder/Node/Node.js","algorithms/dijkstra.js","algorithms/functions/getAllNodes.js","animations/index.js","animations/animateDijkstra.js","animations/shortestPath.js","Pathfinder/Pathfinder.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isEnd","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","heuristicDistance","extraClassName","id","className","Component","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","openSet","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateOpenSetNeighbours","sort","nodeA","nodeB","openSetNeighbours","neighbours","filter","getOpenSetNeighbours","neighbour","previousNode","animateDijkstra","nodesInShortestPathOrder","i","setTimeout","document","getElementById","animateShortestPath","Pathfinder","state","mouseIsPressed","maxRowNodes","Math","floor","window","innerHeight","maxColNodes","innerWidth","throttleWindow","throttle","rowNodes","colNodes","setState","initialise","addEventListener","removeEventListener","bind","newGrid","getNewGridWithWallToggled","alg","animateAlg","currentNode","unshift","getNodesInShortestPathOrder","console","log","onClick","visualiser","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d09cc21d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './node.scss';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isEnd,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      heuristicDistance = null\r\n    } = this.props;\r\n    const extraClassName = isEnd\r\n      ? 'node-end'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n        heuristicDistance={heuristicDistance}>\r\n      </div>\r\n    );\r\n  }\r\n}","import getAllNodes from './functions/getAllNodes';\r\n\r\nexport function dijkstra(grid, startNode, endNode) {\r\n    //if empty or same coordinate exi function\r\n    if(!startNode || !endNode || startNode === endNode ) {\r\n        return false;\r\n    }\r\n    //init array for nodes after visited\r\n    const visitedNodesInOrder = [];\r\n    //start distance is set to 0\r\n    startNode.distance = 0;\r\n    //get all nodes in grid\r\n    const openSet = getAllNodes(grid);\r\n\r\n    //while there are openSet nodes in grid, itterate through (ignor wall nodes) and all to visited array\r\n    while(openSet.length) {\r\n        sortNodesByDistance(openSet);\r\n        const closestNode = openSet.shift();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === endNode) return visitedNodesInOrder;\r\n        updateOpenSetNeighbours(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n//calc nearest nodes by A - B\r\nfunction sortNodesByDistance(openSet) {\r\n  openSet.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n  \r\n//update openSet array after nodes have been itterated over\r\nfunction updateOpenSetNeighbours(node, grid) {\r\n  const openSetNeighbours = getOpenSetNeighbours(node, grid);\r\n  for(const neighbour of openSetNeighbours) {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.previousNode = node;\r\n  }\r\n}\r\n  \r\n//get openSet array and itterate through\r\nfunction getOpenSetNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const {row, col} = node;\r\n  if(row > 0) neighbours.push(grid[row - 1][col]);\r\n  if(row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if(col > 0) neighbours.push(grid[row][col - 1]);\r\n  if(row < grid.length - 1) neighbours.push(grid[row][col + 1]);\r\n  return neighbours.filter(neighbours => !neighbours.isVisited);\r\n}\r\n  \r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(endNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = endNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}","export default function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for(const row of grid) {\r\n        for(const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}","import animateDijkstra from './animateDijkstra';\r\n\r\nexport default animateDijkstra;","import animateShortestPath from './shortestPath';\r\n\r\n//creates animation for Dijkstra algorithm\r\nexport default function animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    //itterate throguh Nodes in order array to animate each nodes\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n        if (i === visitedNodesInOrder.length) {\r\n            setTimeout(() => {\r\n                animateShortestPath(nodesInShortestPathOrder);\r\n            }, 10 * i);\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-visited';\r\n        }, 10 * i);\r\n    }\r\n}","export default function animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        //decided to get node by class instead of Ref for simplisity\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-shortest-path';\r\n        }, 50 * i);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport throttle from 'lodash/throttle';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\n// import {astar} from '../algorithms/astar';\r\nimport animateDijkstra from '../animations';\r\n\r\nimport './pathfinder.css';\r\n\r\nconst START_ROW = 0;\r\nconst START_COL = 1;\r\nconst END_ROW = 1;\r\nconst END_COL = 10;\r\n\r\nexport default class Pathfinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      maxRowNodes: Math.floor((window.innerHeight/25)- 8),\r\n      maxColNodes: Math.floor((window.innerWidth/25))\r\n    }\r\n\r\n    //ReRender grid on resize and sizes grid based on device\r\n    this.throttleWindow = throttle(() => {\r\n        let state = this.state;\r\n        let rowNodes = Math.floor((window.innerHeight/25)-8);\r\n        let colNodes = Math.floor(window.innerWidth/25);\r\n        this.setState({\r\n          ...state,\r\n          maxRowNodes: rowNodes,\r\n          maxColNodes: colNodes\r\n        });\r\n        let grid = initialise(rowNodes, colNodes);\r\n        this.setState({grid});\r\n    });\r\n}\r\n\r\n  componentDidMount() {\r\n    //render grid and Nodes\r\n    const state = this.state;\r\n    const { maxRowNodes, maxColNodes } = this.state;\r\n    let grid = initialise(maxRowNodes, maxColNodes);\r\n    this.setState({\r\n        ...state,\r\n        grid\r\n    });\r\n    window.addEventListener('resize', this.throttleWindow);\r\n  }\r\n\r\n  //remove event listener on component unmount\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.throttleWindow.bind(this));\r\n  }\r\n\r\n  //handle mouse down (for wall feature)\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  //handle mouse enter (for wall feature)\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  //handle mouse up (for wall feature)\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  //Run algotrithm and animation (used parameters so any alg and animation could be passed in)\r\nvisualiser(alg, animateAlg) {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_ROW][START_COL];\r\n    const endNode = grid[END_ROW ][END_COL];\r\n    const visitedNodesInOrder = alg(grid, startNode, endNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\r\n    animateAlg(visitedNodesInOrder, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\n\r\nrender() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    console.log(grid);\r\n    return (\r\n        <div className=\"view\">\r\n            <button onClick={() => this.visualiser(dijkstra, animateDijkstra)}>Run Dijkstra<div className=\"icon play\"></div></button>\r\n\r\n            <div className=\"grid\">\r\n                {grid.map((row, rowIndex) => {\r\n                return ( \r\n                <div key={rowIndex}>\r\n                    {row.map((node, nodeIndex) => {\r\n                        const { row, col, isStart, isEnd, isWall } = node;\r\n                        return (\r\n                        <Node\r\n                            key={nodeIndex}\r\n                            row={row}\r\n                            col={col}\r\n                            isStart={isStart}\r\n                            isEnd={isEnd}\r\n                            isWall={isWall}\r\n                            mouseIsPressed={mouseIsPressed}\r\n                            onMouseDown = {(row, col)=> {this.handleMouseDown(row, col)}}\r\n                            onMouseEnter={(row, col)=> {this.handleMouseEnter(row, col)}}\r\n                            onMouseUp={() => this.handleMouseUp()}>\r\n                        </Node>)})}\r\n                </div> )\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n}\r\n//END PATHFINDER FUNCTION\r\n\r\n\r\n\r\n//Initialise Grid - maxRow & maxCol set by screen height and width (handled by throttleWindow function)\r\nconst initialise = (maxRowNodes, maxColNodes) => {\r\n    const grid = [];\r\n\r\n    for(let row = 0; row < maxRowNodes; row++) {\r\n        const currentRow = [];\r\n        for(let col = 0; col < maxColNodes; col++) {\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\n//Create Nodes\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_ROW && col === START_COL,\r\n        isEnd: row === END_ROW && col === END_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null\r\n    }\r\n};\r\n\r\n//Create wall nodes\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};","import React, { Component } from 'react';\nimport Pathfinder from './Pathfinder/Pathfinder';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Pathfinder />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}